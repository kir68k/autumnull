local c = require('autumnull.palette')

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()

  -- highlights
  hl(0, "Normal", { fg = c.fg, bg = c.bg, })
  hl(0, "SignColumn", { fg = 'NONE', bg = c.bg, })
  hl(0, "MsgArea", { fg = c.fg, bg = c.bg, })
  hl(0, "ModeMsg", { fg = c.fg, bg = c.dark, })
  hl(0, "MsgSeparator", { fg = c.fg, bg = c.bg, })
  hl(0, "SpellBad", { fg = c.error_red, bg = 'NONE', underline=true, })
  hl(0, "SpellCap", { fg = c.warning_orange, bg = 'NONE', underline=true, })
  hl(0, "SpellLocal", { fg = c.green, bg = 'NONE', underline=true, })
  hl(0, "SpellRare", { fg = c.magenta, bg = 'NONE', underline=true, })
  hl(0, "NormalNC", { fg = c.fg, bg = c.bg, })
  hl(0, "Comment", { fg = c.gray, bg = 'NONE', italic=true, })
  hl(0, "Folded", { fg = c.accent, bg = c.alt_bg, })
  hl(0, "FoldColumn", { fg = c.accent, bg = c.alt_bg, })
  hl(0, "LineNr", { fg = c.gray, bg = 'NONE', })
  hl(0, "FloatBorder", { fg = c.gray, bg = c.alt_bg, })
  hl(0, "Whitespace", { fg = c.bg, bg = 'NONE', })
  hl(0, "CursorLine", { fg = 'NONE', bg = c.dark, })
  hl(0, "CursorLineNr", { fg = 'NONE', bg = c.dark, })
  hl(0, "CursorColumn", { fg = 'NONE', bg = c.dark, })
  hl(0, "ColorColumn", { fg = 'NONE', bg = c.dark, })
  hl(0, "NormalFloat", { fg = 'NONE', bg = c.dark, })
  hl(0, "Visual", { fg = 'NONE', bg = c.light_gray, })
  hl(0, "VisualNOS", { fg = 'NONE', bg = c.alt_bg, })
  hl(0, "WarningMsg", { fg = c.error_red, bg = c.bg, })
  hl(0, "DiffAdd", { fg = c.alt_bg, bg = c.sign_add, })
  hl(0, "DiffChange", { fg = c.alt_bg, bg = c.sign_change, underline=true, })
  hl(0, "DiffDelete", { fg = c.alt_bg, bg = c.sign_delete, })
  hl(0, "QuickFixLine", { fg = 'NONE', bg = c.ui2_blue, })
  hl(0, "PmenuSbar", { fg = 'NONE', bg = c.alt_bg, })
  hl(0, "PmenuThumb", { fg = 'NONE', bg = c.gray, })
  hl(0, "MatchWord", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "MatchParen", { fg = c.hint_blue, bg = c.bg, underline=true, })
  hl(0, "MatchWordCur", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "MatchParenCur", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "Cursor", { fg = c.cursor_fg, bg = c.cursor_bg, })
  hl(0, "lCursor", { fg = c.cursor_fg, bg = c.cursor_bg, })
  hl(0, "CursorIM", { fg = c.cursor_fg, bg = c.cursor_bg, })
  hl(0, "TermCursor", { fg = c.cursor_fg, bg = c.cursor_bg, })
  hl(0, "TermCursorNC", { fg = c.cursor_fg, bg = c.cursor_bg, })
  hl(0, "Conceal", { fg = c.accent, bg = 'NONE', })
  hl(0, "Directory", { fg = c.blue, bg = 'NONE', })
  hl(0, "SpecialKey", { fg = c.blue, bg = 'NONE', bold=true, })
  hl(0, "Title", { fg = c.blue, bg = 'NONE', bold=true, })
  hl(0, "ErrorMsg", { fg = c.error_red, bg = c.bg, bold=true, })
  hl(0, "Search", { fg = c.light_gray, bg = c.search_blue, })
  hl(0, "IncSearch", { fg = c.search_orange, bg = c.light_gray, })
  hl(0, "Substitute", { fg = c.light_gray, bg = c.search_orange, })
  hl(0, "MoreMsg", { fg = c.orange, bg = 'NONE', })
  hl(0, "Question", { fg = c.orange, bg = 'NONE', })
  hl(0, "EndOfBuffer", { fg = c.bg, bg = 'NONE', })
  hl(0, "NonText", { fg = c.bg, bg = 'NONE', })
  hl(0, "Variable", { fg = c.light_green, bg = 'NONE', })
  hl(0, "String", { fg = c.yellow, bg = 'NONE', })
  hl(0, "Character", { fg = c.yellow, bg = 'NONE', })
  hl(0, "Constant", { fg = c.vivid_blue, bg = 'NONE', })
  hl(0, "Number", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Boolean", { fg = c.blue, bg = 'NONE', })
  hl(0, "Float", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Identifier", { fg = c.light_blue, bg = 'NONE', })
  hl(0, "Function", { fg = c.red, bg = 'NONE', })
  hl(0, "Operator", { fg = c.fg, bg = 'NONE', })
  hl(0, "Type", { fg = c.cyan, bg = 'NONE', })
  hl(0, "StorageClass", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Structure", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Typedef", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Keyword", { fg = c.light_green, bg = 'NONE', })
  hl(0, "Statement", { fg = c.purple, bg = 'NONE', })
  hl(0, "Conditional", { fg = c.blue, bg = 'NONE', })
  hl(0, "Repeat", { fg = c.orange, bg = 'NONE', })
  hl(0, "Label", { fg = c.orange, bg = 'NONE', })
  hl(0, "Exception", { fg = c.orange, bg = 'NONE', })
  hl(0, "Include", { fg = c.orange, bg = 'NONE', })
  hl(0, "PreProc", { fg = c.orange, bg = 'NONE', })
  hl(0, "Define", { fg = c.orange, bg = 'NONE', })
  hl(0, "Macro", { fg = c.orange, bg = 'NONE', })
  hl(0, "PreCondit", { fg = c.orange, bg = 'NONE', })
  hl(0, "Special", { fg = c.orange, bg = 'NONE', })
  hl(0, "SpecialChar", { fg = c.white, bg = 'NONE', })
  hl(0, "Tag", { fg = c.blue, bg = 'NONE', })
  hl(0, "Debug", { fg = c.red, bg = 'NONE', })
  hl(0, "Delimiter", { fg = c.gray, bg = 'NONE', })
  hl(0, "SpecialComment", { fg = c.gray, bg = 'NONE', })
  hl(0, "Underlined", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "Bold", { fg = 'NONE', bg = 'NONE', bold=true, })
  hl(0, "Italic", { fg = 'NONE', bg = 'NONE', italic=true, })
  hl(0, "Ignore", { fg = c.cyan, bg = c.bg, bold=true, })
  hl(0, "Todo", { fg = c.magenta, bg = c.bg, bold=true, })
  hl(0, "Error", { fg = c.error_red, bg = c.bg, bold=true, })
  hl(0, "TabLine", { fg = c.light_gray, bg = c.line, })
  hl(0, "TabLineSel", { fg = c.white, bg = c.line, })
  hl(0, "TabLineFill", { fg = c.line, bg = c.line, })

end

return theme